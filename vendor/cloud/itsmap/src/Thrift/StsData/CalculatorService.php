<?php
namespace StsData;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface CalculatorServiceIf {
  /**
   * @param string $traceId
   * @param string $taskId
   * @param string $cityId
   * @param string $roadDataPath
   * @param \StsData\RoadVersionRuntime[] $roadVerRuntimeList
   */
  public function calculate($traceId, $taskId, $cityId, $roadDataPath, array $roadVerRuntimeList);
}

class CalculatorServiceClient implements \StsData\CalculatorServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function calculate($traceId, $taskId, $cityId, $roadDataPath, array $roadVerRuntimeList)
  {
    $this->send_calculate($traceId, $taskId, $cityId, $roadDataPath, $roadVerRuntimeList);
  }

  public function send_calculate($traceId, $taskId, $cityId, $roadDataPath, array $roadVerRuntimeList)
  {
    $args = new \StsData\CalculatorService_calculate_args();
    $args->traceId = $traceId;
    $args->taskId = $taskId;
    $args->cityId = $cityId;
    $args->roadDataPath = $roadDataPath;
    $args->roadVerRuntimeList = $roadVerRuntimeList;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'calculate', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('calculate', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class CalculatorService_calculate_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $traceId = null;
  /**
   * @var string
   */
  public $taskId = null;
  /**
   * @var string
   */
  public $cityId = null;
  /**
   * @var string
   */
  public $roadDataPath = null;
  /**
   * @var \StsData\RoadVersionRuntime[]
   */
  public $roadVerRuntimeList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'traceId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'taskId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cityId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'roadDataPath',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'roadVerRuntimeList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\StsData\RoadVersionRuntime',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['traceId'])) {
        $this->traceId = $vals['traceId'];
      }
      if (isset($vals['taskId'])) {
        $this->taskId = $vals['taskId'];
      }
      if (isset($vals['cityId'])) {
        $this->cityId = $vals['cityId'];
      }
      if (isset($vals['roadDataPath'])) {
        $this->roadDataPath = $vals['roadDataPath'];
      }
      if (isset($vals['roadVerRuntimeList'])) {
        $this->roadVerRuntimeList = $vals['roadVerRuntimeList'];
      }
    }
  }

  public function getName() {
    return 'CalculatorService_calculate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->traceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->taskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->roadDataPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->roadVerRuntimeList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \StsData\RoadVersionRuntime();
              $xfer += $elem5->read($input);
              $this->roadVerRuntimeList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CalculatorService_calculate_args');
    if ($this->traceId !== null) {
      $xfer += $output->writeFieldBegin('traceId', TType::STRING, 1);
      $xfer += $output->writeString($this->traceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taskId !== null) {
      $xfer += $output->writeFieldBegin('taskId', TType::STRING, 2);
      $xfer += $output->writeString($this->taskId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cityId !== null) {
      $xfer += $output->writeFieldBegin('cityId', TType::STRING, 3);
      $xfer += $output->writeString($this->cityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roadDataPath !== null) {
      $xfer += $output->writeFieldBegin('roadDataPath', TType::STRING, 4);
      $xfer += $output->writeString($this->roadDataPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roadVerRuntimeList !== null) {
      if (!is_array($this->roadVerRuntimeList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('roadVerRuntimeList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->roadVerRuntimeList));
        {
          foreach ($this->roadVerRuntimeList as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


