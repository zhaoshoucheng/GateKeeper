<?php
namespace DidiRoadNet;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ResultStatus {
  const NORMAL = 0;
  const WRONG_REQ = 100;
  const INTERNAL_ERR = 101;
  static public $__names = array(
    0 => 'NORMAL',
    100 => 'WRONG_REQ',
    101 => 'INTERNAL_ERR',
  );
}

class Point {
  static $_TSPEC;

  /**
   * @var int
   */
  public $lng = null;
  /**
   * @var int
   */
  public $lat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lng',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'lat',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lng'])) {
        $this->lng = $vals['lng'];
      }
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
    }
  }

  public function getName() {
    return 'Point';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lng);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Point');
    if ($this->lng !== null) {
      $xfer += $output->writeFieldBegin('lng', TType::I32, 1);
      $xfer += $output->writeI32($this->lng);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::I32, 2);
      $xfer += $output->writeI32($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SubNodeFilterRequest {
  static $_TSPEC;

  /**
   * @var \DidiRoadNet\Point[]
   */
  public $polygon_req = null;
  /**
   * @var string
   */
  public $version_id = null;
  /**
   * @var int
   */
  public $type_id = null;
  /**
   * @var int
   */
  public $city_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'polygon_req',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\Point',
            ),
          ),
        2 => array(
          'var' => 'version_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'city_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['polygon_req'])) {
        $this->polygon_req = $vals['polygon_req'];
      }
      if (isset($vals['version_id'])) {
        $this->version_id = $vals['version_id'];
      }
      if (isset($vals['type_id'])) {
        $this->type_id = $vals['type_id'];
      }
      if (isset($vals['city_id'])) {
        $this->city_id = $vals['city_id'];
      }
    }
  }

  public function getName() {
    return 'SubNodeFilterRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->polygon_req = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \DidiRoadNet\Point();
              $xfer += $elem5->read($input);
              $this->polygon_req []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->city_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SubNodeFilterRequest');
    if ($this->polygon_req !== null) {
      if (!is_array($this->polygon_req)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('polygon_req', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->polygon_req));
        {
          foreach ($this->polygon_req as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version_id !== null) {
      $xfer += $output->writeFieldBegin('version_id', TType::STRING, 2);
      $xfer += $output->writeString($this->version_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type_id !== null) {
      $xfer += $output->writeFieldBegin('type_id', TType::I32, 3);
      $xfer += $output->writeI32($this->type_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city_id !== null) {
      $xfer += $output->writeFieldBegin('city_id', TType::I32, 4);
      $xfer += $output->writeI32($this->city_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NodeFilterRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $trace_id = null;
  /**
   * @var \DidiRoadNet\SubNodeFilterRequest[]
   */
  public $node_filter_req = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'trace_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'node_filter_req',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\SubNodeFilterRequest',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['trace_id'])) {
        $this->trace_id = $vals['trace_id'];
      }
      if (isset($vals['node_filter_req'])) {
        $this->node_filter_req = $vals['node_filter_req'];
      }
    }
  }

  public function getName() {
    return 'NodeFilterRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->trace_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->node_filter_req = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \DidiRoadNet\SubNodeFilterRequest();
              $xfer += $elem12->read($input);
              $this->node_filter_req []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NodeFilterRequest');
    if ($this->trace_id !== null) {
      $xfer += $output->writeFieldBegin('trace_id', TType::STRING, 1);
      $xfer += $output->writeString($this->trace_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->node_filter_req !== null) {
      if (!is_array($this->node_filter_req)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('node_filter_req', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->node_filter_req));
        {
          foreach ($this->node_filter_req as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NodeFilterResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $err_no = null;
  /**
   * @var string
   */
  public $err_msg = null;
  /**
   * @var (int[])[]
   */
  public $res = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'err_no',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'err_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'res',
          'type' => TType::LST,
          'etype' => TType::LST,
          'elem' => array(
            'type' => TType::LST,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['err_no'])) {
        $this->err_no = $vals['err_no'];
      }
      if (isset($vals['err_msg'])) {
        $this->err_msg = $vals['err_msg'];
      }
      if (isset($vals['res'])) {
        $this->res = $vals['res'];
      }
    }
  }

  public function getName() {
    return 'NodeFilterResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->err_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->err_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->res = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = array();
              $_size20 = 0;
              $_etype23 = 0;
              $xfer += $input->readListBegin($_etype23, $_size20);
              for ($_i24 = 0; $_i24 < $_size20; ++$_i24)
              {
                $elem25 = null;
                $xfer += $input->readI64($elem25);
                $elem19 []= $elem25;
              }
              $xfer += $input->readListEnd();
              $this->res []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NodeFilterResponse');
    if ($this->err_no !== null) {
      $xfer += $output->writeFieldBegin('err_no', TType::I32, 1);
      $xfer += $output->writeI32($this->err_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err_msg !== null) {
      $xfer += $output->writeFieldBegin('err_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->err_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->res !== null) {
      if (!is_array($this->res)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('res', TType::LST, 3);
      {
        $output->writeListBegin(TType::LST, count($this->res));
        {
          foreach ($this->res as $iter26)
          {
            {
              $output->writeListBegin(TType::I64, count($iter26));
              {
                foreach ($iter26 as $iter27)
                {
                  $xfer += $output->writeI64($iter27);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JunctionReq {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $node_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'node_id',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['node_id'])) {
        $this->node_id = $vals['node_id'];
      }
    }
  }

  public function getName() {
    return 'JunctionReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->node_id = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $xfer += $input->readI64($elem33);
              $this->node_id []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JunctionReq');
    if ($this->node_id !== null) {
      if (!is_array($this->node_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('node_id', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->node_id));
        {
          foreach ($this->node_id as $iter34)
          {
            $xfer += $output->writeI64($iter34);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InheritNodesRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $trace_id = null;
  /**
   * @var \DidiRoadNet\JunctionReq[]
   */
  public $junc_req = null;
  /**
   * @var string
   */
  public $ori_version_id = null;
  /**
   * @var string[]
   */
  public $version_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'trace_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'junc_req',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\JunctionReq',
            ),
          ),
        3 => array(
          'var' => 'ori_version_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'version_ids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['trace_id'])) {
        $this->trace_id = $vals['trace_id'];
      }
      if (isset($vals['junc_req'])) {
        $this->junc_req = $vals['junc_req'];
      }
      if (isset($vals['ori_version_id'])) {
        $this->ori_version_id = $vals['ori_version_id'];
      }
      if (isset($vals['version_ids'])) {
        $this->version_ids = $vals['version_ids'];
      }
    }
  }

  public function getName() {
    return 'InheritNodesRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->trace_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->junc_req = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \DidiRoadNet\JunctionReq();
              $xfer += $elem40->read($input);
              $this->junc_req []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ori_version_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->version_ids = array();
            $_size41 = 0;
            $_etype44 = 0;
            $xfer += $input->readListBegin($_etype44, $_size41);
            for ($_i45 = 0; $_i45 < $_size41; ++$_i45)
            {
              $elem46 = null;
              $xfer += $input->readString($elem46);
              $this->version_ids []= $elem46;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InheritNodesRequest');
    if ($this->trace_id !== null) {
      $xfer += $output->writeFieldBegin('trace_id', TType::STRING, 1);
      $xfer += $output->writeString($this->trace_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->junc_req !== null) {
      if (!is_array($this->junc_req)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('junc_req', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->junc_req));
        {
          foreach ($this->junc_req as $iter47)
          {
            $xfer += $iter47->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ori_version_id !== null) {
      $xfer += $output->writeFieldBegin('ori_version_id', TType::STRING, 3);
      $xfer += $output->writeString($this->ori_version_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version_ids !== null) {
      if (!is_array($this->version_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('version_ids', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->version_ids));
        {
          foreach ($this->version_ids as $iter48)
          {
            $xfer += $output->writeString($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JunctionRes {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $node_id = null;
  /**
   * @var int
   */
  public $level = null;
  /**
   * @var int[]
   */
  public $inner_links = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'node_id',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'level',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'inner_links',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['node_id'])) {
        $this->node_id = $vals['node_id'];
      }
      if (isset($vals['level'])) {
        $this->level = $vals['level'];
      }
      if (isset($vals['inner_links'])) {
        $this->inner_links = $vals['inner_links'];
      }
    }
  }

  public function getName() {
    return 'JunctionRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->node_id = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $xfer += $input->readI64($elem54);
              $this->node_id []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->inner_links = array();
            $_size55 = 0;
            $_etype58 = 0;
            $xfer += $input->readListBegin($_etype58, $_size55);
            for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
            {
              $elem60 = null;
              $xfer += $input->readI64($elem60);
              $this->inner_links []= $elem60;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JunctionRes');
    if ($this->node_id !== null) {
      if (!is_array($this->node_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('node_id', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->node_id));
        {
          foreach ($this->node_id as $iter61)
          {
            $xfer += $output->writeI64($iter61);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->level !== null) {
      $xfer += $output->writeFieldBegin('level', TType::I16, 2);
      $xfer += $output->writeI16($this->level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inner_links !== null) {
      if (!is_array($this->inner_links)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('inner_links', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->inner_links));
        {
          foreach ($this->inner_links as $iter62)
          {
            $xfer += $output->writeI64($iter62);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VersionJunctionsReq {
  static $_TSPEC;

  /**
   * @var string
   */
  public $version_id = null;
  /**
   * @var \DidiRoadNet\JunctionRes[]
   */
  public $junctions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'junctions',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\JunctionRes',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version_id'])) {
        $this->version_id = $vals['version_id'];
      }
      if (isset($vals['junctions'])) {
        $this->junctions = $vals['junctions'];
      }
    }
  }

  public function getName() {
    return 'VersionJunctionsReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->junctions = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $elem68 = new \DidiRoadNet\JunctionRes();
              $xfer += $elem68->read($input);
              $this->junctions []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VersionJunctionsReq');
    if ($this->version_id !== null) {
      $xfer += $output->writeFieldBegin('version_id', TType::STRING, 1);
      $xfer += $output->writeString($this->version_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->junctions !== null) {
      if (!is_array($this->junctions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('junctions', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->junctions));
        {
          foreach ($this->junctions as $iter69)
          {
            $xfer += $iter69->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InheritNodesResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $err_no = null;
  /**
   * @var string
   */
  public $err_msg = null;
  /**
   * @var \DidiRoadNet\VersionJunctionsReq[]
   */
  public $res = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'err_no',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'err_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'res',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\VersionJunctionsReq',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['err_no'])) {
        $this->err_no = $vals['err_no'];
      }
      if (isset($vals['err_msg'])) {
        $this->err_msg = $vals['err_msg'];
      }
      if (isset($vals['res'])) {
        $this->res = $vals['res'];
      }
    }
  }

  public function getName() {
    return 'InheritNodesResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->err_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->err_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->res = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new \DidiRoadNet\VersionJunctionsReq();
              $xfer += $elem75->read($input);
              $this->res []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InheritNodesResponse');
    if ($this->err_no !== null) {
      $xfer += $output->writeFieldBegin('err_no', TType::I32, 1);
      $xfer += $output->writeI32($this->err_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err_msg !== null) {
      $xfer += $output->writeFieldBegin('err_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->err_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->res !== null) {
      if (!is_array($this->res)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('res', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->res));
        {
          foreach ($this->res as $iter76)
          {
            $xfer += $iter76->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InoutLinkReq {
  static $_TSPEC;

  /**
   * @var string
   */
  public $logic_inout_link_id = null;
  /**
   * @var int
   */
  public $link_id = null;
  /**
   * @var int
   */
  public $inout_link_flag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'logic_inout_link_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'link_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'inout_link_flag',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['logic_inout_link_id'])) {
        $this->logic_inout_link_id = $vals['logic_inout_link_id'];
      }
      if (isset($vals['link_id'])) {
        $this->link_id = $vals['link_id'];
      }
      if (isset($vals['inout_link_flag'])) {
        $this->inout_link_flag = $vals['inout_link_flag'];
      }
    }
  }

  public function getName() {
    return 'InoutLinkReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logic_inout_link_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->link_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->inout_link_flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InoutLinkReq');
    if ($this->logic_inout_link_id !== null) {
      $xfer += $output->writeFieldBegin('logic_inout_link_id', TType::STRING, 1);
      $xfer += $output->writeString($this->logic_inout_link_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link_id !== null) {
      $xfer += $output->writeFieldBegin('link_id', TType::I64, 2);
      $xfer += $output->writeI64($this->link_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inout_link_flag !== null) {
      $xfer += $output->writeFieldBegin('inout_link_flag', TType::I16, 3);
      $xfer += $output->writeI16($this->inout_link_flag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NodeIdsReq {
  static $_TSPEC;

  /**
   * @var string
   */
  public $version_id = null;
  /**
   * @var int[]
   */
  public $node_id = null;
  /**
   * @var string
   */
  public $logic_junction_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'node_id',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'logic_junction_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version_id'])) {
        $this->version_id = $vals['version_id'];
      }
      if (isset($vals['node_id'])) {
        $this->node_id = $vals['node_id'];
      }
      if (isset($vals['logic_junction_id'])) {
        $this->logic_junction_id = $vals['logic_junction_id'];
      }
    }
  }

  public function getName() {
    return 'NodeIdsReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->node_id = array();
            $_size77 = 0;
            $_etype80 = 0;
            $xfer += $input->readListBegin($_etype80, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $elem82 = null;
              $xfer += $input->readI64($elem82);
              $this->node_id []= $elem82;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logic_junction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NodeIdsReq');
    if ($this->version_id !== null) {
      $xfer += $output->writeFieldBegin('version_id', TType::STRING, 1);
      $xfer += $output->writeString($this->version_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->node_id !== null) {
      if (!is_array($this->node_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('node_id', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->node_id));
        {
          foreach ($this->node_id as $iter83)
          {
            $xfer += $output->writeI64($iter83);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logic_junction_id !== null) {
      $xfer += $output->writeFieldBegin('logic_junction_id', TType::STRING, 3);
      $xfer += $output->writeString($this->logic_junction_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InheritInoutLinkRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $trace_id = null;
  /**
   * @var \DidiRoadNet\NodeIdsReq[]
   */
  public $versions = null;
  /**
   * @var \DidiRoadNet\InoutLinkReq[]
   */
  public $ori_inout_link = null;
  /**
   * @var \DidiRoadNet\NodeIdsReq
   */
  public $ori_version = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'trace_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'versions',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\NodeIdsReq',
            ),
          ),
        3 => array(
          'var' => 'ori_inout_link',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\InoutLinkReq',
            ),
          ),
        4 => array(
          'var' => 'ori_version',
          'type' => TType::STRUCT,
          'class' => '\DidiRoadNet\NodeIdsReq',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['trace_id'])) {
        $this->trace_id = $vals['trace_id'];
      }
      if (isset($vals['versions'])) {
        $this->versions = $vals['versions'];
      }
      if (isset($vals['ori_inout_link'])) {
        $this->ori_inout_link = $vals['ori_inout_link'];
      }
      if (isset($vals['ori_version'])) {
        $this->ori_version = $vals['ori_version'];
      }
    }
  }

  public function getName() {
    return 'InheritInoutLinkRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->trace_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->versions = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $elem89 = new \DidiRoadNet\NodeIdsReq();
              $xfer += $elem89->read($input);
              $this->versions []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->ori_inout_link = array();
            $_size90 = 0;
            $_etype93 = 0;
            $xfer += $input->readListBegin($_etype93, $_size90);
            for ($_i94 = 0; $_i94 < $_size90; ++$_i94)
            {
              $elem95 = null;
              $elem95 = new \DidiRoadNet\InoutLinkReq();
              $xfer += $elem95->read($input);
              $this->ori_inout_link []= $elem95;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ori_version = new \DidiRoadNet\NodeIdsReq();
            $xfer += $this->ori_version->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InheritInoutLinkRequest');
    if ($this->trace_id !== null) {
      $xfer += $output->writeFieldBegin('trace_id', TType::STRING, 1);
      $xfer += $output->writeString($this->trace_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->versions !== null) {
      if (!is_array($this->versions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('versions', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->versions));
        {
          foreach ($this->versions as $iter96)
          {
            $xfer += $iter96->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ori_inout_link !== null) {
      if (!is_array($this->ori_inout_link)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ori_inout_link', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->ori_inout_link));
        {
          foreach ($this->ori_inout_link as $iter97)
          {
            $xfer += $iter97->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ori_version !== null) {
      if (!is_object($this->ori_version)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ori_version', TType::STRUCT, 4);
      $xfer += $this->ori_version->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FlowRes {
  static $_TSPEC;

  /**
   * @var int
   */
  public $in_link_id = null;
  /**
   * @var int
   */
  public $out_link_id = null;
  /**
   * @var double
   */
  public $turn_degree = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'in_link_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'out_link_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'turn_degree',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['in_link_id'])) {
        $this->in_link_id = $vals['in_link_id'];
      }
      if (isset($vals['out_link_id'])) {
        $this->out_link_id = $vals['out_link_id'];
      }
      if (isset($vals['turn_degree'])) {
        $this->turn_degree = $vals['turn_degree'];
      }
    }
  }

  public function getName() {
    return 'FlowRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->in_link_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->out_link_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->turn_degree);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FlowRes');
    if ($this->in_link_id !== null) {
      $xfer += $output->writeFieldBegin('in_link_id', TType::I64, 1);
      $xfer += $output->writeI64($this->in_link_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->out_link_id !== null) {
      $xfer += $output->writeFieldBegin('out_link_id', TType::I64, 2);
      $xfer += $output->writeI64($this->out_link_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->turn_degree !== null) {
      $xfer += $output->writeFieldBegin('turn_degree', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->turn_degree);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InoutLinkRes {
  static $_TSPEC;

  /**
   * @var string
   */
  public $logic_inout_link_id = null;
  /**
   * @var int
   */
  public $link_id = null;
  /**
   * @var int
   */
  public $inout_link_flag = null;
  /**
   * @var int
   */
  public $level = null;
  /**
   * @var double
   */
  public $degree = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'logic_inout_link_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'link_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'inout_link_flag',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'level',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'degree',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['logic_inout_link_id'])) {
        $this->logic_inout_link_id = $vals['logic_inout_link_id'];
      }
      if (isset($vals['link_id'])) {
        $this->link_id = $vals['link_id'];
      }
      if (isset($vals['inout_link_flag'])) {
        $this->inout_link_flag = $vals['inout_link_flag'];
      }
      if (isset($vals['level'])) {
        $this->level = $vals['level'];
      }
      if (isset($vals['degree'])) {
        $this->degree = $vals['degree'];
      }
    }
  }

  public function getName() {
    return 'InoutLinkRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logic_inout_link_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->link_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->inout_link_flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->degree);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InoutLinkRes');
    if ($this->logic_inout_link_id !== null) {
      $xfer += $output->writeFieldBegin('logic_inout_link_id', TType::STRING, 1);
      $xfer += $output->writeString($this->logic_inout_link_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link_id !== null) {
      $xfer += $output->writeFieldBegin('link_id', TType::I64, 2);
      $xfer += $output->writeI64($this->link_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inout_link_flag !== null) {
      $xfer += $output->writeFieldBegin('inout_link_flag', TType::I16, 3);
      $xfer += $output->writeI16($this->inout_link_flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->level !== null) {
      $xfer += $output->writeFieldBegin('level', TType::I16, 4);
      $xfer += $output->writeI16($this->level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->degree !== null) {
      $xfer += $output->writeFieldBegin('degree', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->degree);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JunctionInoutLinkRes {
  static $_TSPEC;

  /**
   * @var string
   */
  public $version_id = null;
  /**
   * @var \DidiRoadNet\InoutLinkRes[]
   */
  public $inout_link = null;
  /**
   * @var \DidiRoadNet\FlowRes[]
   */
  public $flow = null;
  /**
   * @var int[]
   */
  public $inner_links = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'inout_link',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\InoutLinkRes',
            ),
          ),
        3 => array(
          'var' => 'flow',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\FlowRes',
            ),
          ),
        4 => array(
          'var' => 'inner_links',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version_id'])) {
        $this->version_id = $vals['version_id'];
      }
      if (isset($vals['inout_link'])) {
        $this->inout_link = $vals['inout_link'];
      }
      if (isset($vals['flow'])) {
        $this->flow = $vals['flow'];
      }
      if (isset($vals['inner_links'])) {
        $this->inner_links = $vals['inner_links'];
      }
    }
  }

  public function getName() {
    return 'JunctionInoutLinkRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->inout_link = array();
            $_size98 = 0;
            $_etype101 = 0;
            $xfer += $input->readListBegin($_etype101, $_size98);
            for ($_i102 = 0; $_i102 < $_size98; ++$_i102)
            {
              $elem103 = null;
              $elem103 = new \DidiRoadNet\InoutLinkRes();
              $xfer += $elem103->read($input);
              $this->inout_link []= $elem103;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->flow = array();
            $_size104 = 0;
            $_etype107 = 0;
            $xfer += $input->readListBegin($_etype107, $_size104);
            for ($_i108 = 0; $_i108 < $_size104; ++$_i108)
            {
              $elem109 = null;
              $elem109 = new \DidiRoadNet\FlowRes();
              $xfer += $elem109->read($input);
              $this->flow []= $elem109;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->inner_links = array();
            $_size110 = 0;
            $_etype113 = 0;
            $xfer += $input->readListBegin($_etype113, $_size110);
            for ($_i114 = 0; $_i114 < $_size110; ++$_i114)
            {
              $elem115 = null;
              $xfer += $input->readI64($elem115);
              $this->inner_links []= $elem115;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JunctionInoutLinkRes');
    if ($this->version_id !== null) {
      $xfer += $output->writeFieldBegin('version_id', TType::STRING, 1);
      $xfer += $output->writeString($this->version_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inout_link !== null) {
      if (!is_array($this->inout_link)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('inout_link', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->inout_link));
        {
          foreach ($this->inout_link as $iter116)
          {
            $xfer += $iter116->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flow !== null) {
      if (!is_array($this->flow)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('flow', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->flow));
        {
          foreach ($this->flow as $iter117)
          {
            $xfer += $iter117->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inner_links !== null) {
      if (!is_array($this->inner_links)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('inner_links', TType::LST, 4);
      {
        $output->writeListBegin(TType::I64, count($this->inner_links));
        {
          foreach ($this->inner_links as $iter118)
          {
            $xfer += $output->writeI64($iter118);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InheritInoutLinkResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $err_no = null;
  /**
   * @var string
   */
  public $err_msg = null;
  /**
   * @var \DidiRoadNet\JunctionInoutLinkRes[]
   */
  public $res = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'err_no',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'err_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'res',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\JunctionInoutLinkRes',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['err_no'])) {
        $this->err_no = $vals['err_no'];
      }
      if (isset($vals['err_msg'])) {
        $this->err_msg = $vals['err_msg'];
      }
      if (isset($vals['res'])) {
        $this->res = $vals['res'];
      }
    }
  }

  public function getName() {
    return 'InheritInoutLinkResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->err_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->err_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->res = array();
            $_size119 = 0;
            $_etype122 = 0;
            $xfer += $input->readListBegin($_etype122, $_size119);
            for ($_i123 = 0; $_i123 < $_size119; ++$_i123)
            {
              $elem124 = null;
              $elem124 = new \DidiRoadNet\JunctionInoutLinkRes();
              $xfer += $elem124->read($input);
              $this->res []= $elem124;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InheritInoutLinkResponse');
    if ($this->err_no !== null) {
      $xfer += $output->writeFieldBegin('err_no', TType::I32, 1);
      $xfer += $output->writeI32($this->err_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err_msg !== null) {
      $xfer += $output->writeFieldBegin('err_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->err_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->res !== null) {
      if (!is_array($this->res)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('res', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->res));
        {
          foreach ($this->res as $iter125)
          {
            $xfer += $iter125->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LogicJunctionReq {
  static $_TSPEC;

  /**
   * @var string
   */
  public $logic_junction_id = null;
  /**
   * @var int[]
   */
  public $node_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'logic_junction_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'node_id',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['logic_junction_id'])) {
        $this->logic_junction_id = $vals['logic_junction_id'];
      }
      if (isset($vals['node_id'])) {
        $this->node_id = $vals['node_id'];
      }
    }
  }

  public function getName() {
    return 'LogicJunctionReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logic_junction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->node_id = array();
            $_size126 = 0;
            $_etype129 = 0;
            $xfer += $input->readListBegin($_etype129, $_size126);
            for ($_i130 = 0; $_i130 < $_size126; ++$_i130)
            {
              $elem131 = null;
              $xfer += $input->readI64($elem131);
              $this->node_id []= $elem131;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LogicJunctionReq');
    if ($this->logic_junction_id !== null) {
      $xfer += $output->writeFieldBegin('logic_junction_id', TType::STRING, 1);
      $xfer += $output->writeString($this->logic_junction_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->node_id !== null) {
      if (!is_array($this->node_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('node_id', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->node_id));
        {
          foreach ($this->node_id as $iter132)
          {
            $xfer += $output->writeI64($iter132);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LogicFlowReq {
  static $_TSPEC;

  /**
   * @var string
   */
  public $logic_flow_id = null;
  /**
   * @var string
   */
  public $logic_junction_id = null;
  /**
   * @var int
   */
  public $in_link_id = null;
  /**
   * @var int
   */
  public $out_link_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'logic_flow_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'logic_junction_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'in_link_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'out_link_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['logic_flow_id'])) {
        $this->logic_flow_id = $vals['logic_flow_id'];
      }
      if (isset($vals['logic_junction_id'])) {
        $this->logic_junction_id = $vals['logic_junction_id'];
      }
      if (isset($vals['in_link_id'])) {
        $this->in_link_id = $vals['in_link_id'];
      }
      if (isset($vals['out_link_id'])) {
        $this->out_link_id = $vals['out_link_id'];
      }
    }
  }

  public function getName() {
    return 'LogicFlowReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logic_flow_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logic_junction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->in_link_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->out_link_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LogicFlowReq');
    if ($this->logic_flow_id !== null) {
      $xfer += $output->writeFieldBegin('logic_flow_id', TType::STRING, 1);
      $xfer += $output->writeString($this->logic_flow_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logic_junction_id !== null) {
      $xfer += $output->writeFieldBegin('logic_junction_id', TType::STRING, 2);
      $xfer += $output->writeString($this->logic_junction_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->in_link_id !== null) {
      $xfer += $output->writeFieldBegin('in_link_id', TType::I64, 3);
      $xfer += $output->writeI64($this->in_link_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->out_link_id !== null) {
      $xfer += $output->writeFieldBegin('out_link_id', TType::I64, 4);
      $xfer += $output->writeI64($this->out_link_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AreaFlowVersionReq {
  static $_TSPEC;

  /**
   * @var string
   */
  public $version_id = null;
  /**
   * @var \DidiRoadNet\LogicJunctionReq[]
   */
  public $junction = null;
  /**
   * @var \DidiRoadNet\LogicFlowReq[]
   */
  public $flow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'junction',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\LogicJunctionReq',
            ),
          ),
        3 => array(
          'var' => 'flow',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\LogicFlowReq',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version_id'])) {
        $this->version_id = $vals['version_id'];
      }
      if (isset($vals['junction'])) {
        $this->junction = $vals['junction'];
      }
      if (isset($vals['flow'])) {
        $this->flow = $vals['flow'];
      }
    }
  }

  public function getName() {
    return 'AreaFlowVersionReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->junction = array();
            $_size133 = 0;
            $_etype136 = 0;
            $xfer += $input->readListBegin($_etype136, $_size133);
            for ($_i137 = 0; $_i137 < $_size133; ++$_i137)
            {
              $elem138 = null;
              $elem138 = new \DidiRoadNet\LogicJunctionReq();
              $xfer += $elem138->read($input);
              $this->junction []= $elem138;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->flow = array();
            $_size139 = 0;
            $_etype142 = 0;
            $xfer += $input->readListBegin($_etype142, $_size139);
            for ($_i143 = 0; $_i143 < $_size139; ++$_i143)
            {
              $elem144 = null;
              $elem144 = new \DidiRoadNet\LogicFlowReq();
              $xfer += $elem144->read($input);
              $this->flow []= $elem144;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AreaFlowVersionReq');
    if ($this->version_id !== null) {
      $xfer += $output->writeFieldBegin('version_id', TType::STRING, 1);
      $xfer += $output->writeString($this->version_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->junction !== null) {
      if (!is_array($this->junction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('junction', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->junction));
        {
          foreach ($this->junction as $iter145)
          {
            $xfer += $iter145->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flow !== null) {
      if (!is_array($this->flow)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('flow', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->flow));
        {
          foreach ($this->flow as $iter146)
          {
            $xfer += $iter146->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AreaFlowRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $trace_id = null;
  /**
   * @var string
   */
  public $task_id = null;
  /**
   * @var \DidiRoadNet\AreaFlowVersionReq[]
   */
  public $version_req = null;
  /**
   * @var string
   */
  public $hdfs_dir = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'trace_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'task_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'version_req',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\AreaFlowVersionReq',
            ),
          ),
        4 => array(
          'var' => 'hdfs_dir',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['trace_id'])) {
        $this->trace_id = $vals['trace_id'];
      }
      if (isset($vals['task_id'])) {
        $this->task_id = $vals['task_id'];
      }
      if (isset($vals['version_req'])) {
        $this->version_req = $vals['version_req'];
      }
      if (isset($vals['hdfs_dir'])) {
        $this->hdfs_dir = $vals['hdfs_dir'];
      }
    }
  }

  public function getName() {
    return 'AreaFlowRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->trace_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->version_req = array();
            $_size147 = 0;
            $_etype150 = 0;
            $xfer += $input->readListBegin($_etype150, $_size147);
            for ($_i151 = 0; $_i151 < $_size147; ++$_i151)
            {
              $elem152 = null;
              $elem152 = new \DidiRoadNet\AreaFlowVersionReq();
              $xfer += $elem152->read($input);
              $this->version_req []= $elem152;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hdfs_dir);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AreaFlowRequest');
    if ($this->trace_id !== null) {
      $xfer += $output->writeFieldBegin('trace_id', TType::STRING, 1);
      $xfer += $output->writeString($this->trace_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_id !== null) {
      $xfer += $output->writeFieldBegin('task_id', TType::STRING, 2);
      $xfer += $output->writeString($this->task_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version_req !== null) {
      if (!is_array($this->version_req)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('version_req', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->version_req));
        {
          foreach ($this->version_req as $iter153)
          {
            $xfer += $iter153->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hdfs_dir !== null) {
      $xfer += $output->writeFieldBegin('hdfs_dir', TType::STRING, 4);
      $xfer += $output->writeString($this->hdfs_dir);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AreaFlowResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $err_no = null;
  /**
   * @var string
   */
  public $err_msg = null;
  /**
   * @var string
   */
  public $res = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'err_no',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'err_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'res',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['err_no'])) {
        $this->err_no = $vals['err_no'];
      }
      if (isset($vals['err_msg'])) {
        $this->err_msg = $vals['err_msg'];
      }
      if (isset($vals['res'])) {
        $this->res = $vals['res'];
      }
    }
  }

  public function getName() {
    return 'AreaFlowResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->err_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->err_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->res);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AreaFlowResponse');
    if ($this->err_no !== null) {
      $xfer += $output->writeFieldBegin('err_no', TType::I32, 1);
      $xfer += $output->writeI32($this->err_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err_msg !== null) {
      $xfer += $output->writeFieldBegin('err_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->err_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->res !== null) {
      $xfer += $output->writeFieldBegin('res', TType::STRING, 3);
      $xfer += $output->writeString($this->res);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LinkAttrRequest {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $link_id = null;
  /**
   * @var string
   */
  public $version_id = null;
  /**
   * @var string
   */
  public $trace_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'link_id',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'version_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'trace_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['link_id'])) {
        $this->link_id = $vals['link_id'];
      }
      if (isset($vals['version_id'])) {
        $this->version_id = $vals['version_id'];
      }
      if (isset($vals['trace_id'])) {
        $this->trace_id = $vals['trace_id'];
      }
    }
  }

  public function getName() {
    return 'LinkAttrRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->link_id = array();
            $_size154 = 0;
            $_etype157 = 0;
            $xfer += $input->readListBegin($_etype157, $_size154);
            for ($_i158 = 0; $_i158 < $_size154; ++$_i158)
            {
              $elem159 = null;
              $xfer += $input->readI64($elem159);
              $this->link_id []= $elem159;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->trace_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LinkAttrRequest');
    if ($this->link_id !== null) {
      if (!is_array($this->link_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('link_id', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->link_id));
        {
          foreach ($this->link_id as $iter160)
          {
            $xfer += $output->writeI64($iter160);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version_id !== null) {
      $xfer += $output->writeFieldBegin('version_id', TType::STRING, 2);
      $xfer += $output->writeString($this->version_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trace_id !== null) {
      $xfer += $output->writeFieldBegin('trace_id', TType::STRING, 3);
      $xfer += $output->writeString($this->trace_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NodeAttr {
  static $_TSPEC;

  /**
   * @var int
   */
  public $node_id = null;
  /**
   * @var int
   */
  public $lng = null;
  /**
   * @var int
   */
  public $lat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'node_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'lng',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'lat',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['node_id'])) {
        $this->node_id = $vals['node_id'];
      }
      if (isset($vals['lng'])) {
        $this->lng = $vals['lng'];
      }
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
    }
  }

  public function getName() {
    return 'NodeAttr';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->node_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lng);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NodeAttr');
    if ($this->node_id !== null) {
      $xfer += $output->writeFieldBegin('node_id', TType::I64, 1);
      $xfer += $output->writeI64($this->node_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lng !== null) {
      $xfer += $output->writeFieldBegin('lng', TType::I32, 2);
      $xfer += $output->writeI32($this->lng);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::I32, 3);
      $xfer += $output->writeI32($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LinkAttr {
  static $_TSPEC;

  /**
   * @var int
   */
  public $link_id = null;
  /**
   * @var \DidiRoadNet\NodeAttr
   */
  public $s_node = null;
  /**
   * @var \DidiRoadNet\NodeAttr
   */
  public $e_node = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'link_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 's_node',
          'type' => TType::STRUCT,
          'class' => '\DidiRoadNet\NodeAttr',
          ),
        5 => array(
          'var' => 'e_node',
          'type' => TType::STRUCT,
          'class' => '\DidiRoadNet\NodeAttr',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['link_id'])) {
        $this->link_id = $vals['link_id'];
      }
      if (isset($vals['s_node'])) {
        $this->s_node = $vals['s_node'];
      }
      if (isset($vals['e_node'])) {
        $this->e_node = $vals['e_node'];
      }
    }
  }

  public function getName() {
    return 'LinkAttr';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->link_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->s_node = new \DidiRoadNet\NodeAttr();
            $xfer += $this->s_node->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->e_node = new \DidiRoadNet\NodeAttr();
            $xfer += $this->e_node->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LinkAttr');
    if ($this->link_id !== null) {
      $xfer += $output->writeFieldBegin('link_id', TType::I64, 1);
      $xfer += $output->writeI64($this->link_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s_node !== null) {
      if (!is_object($this->s_node)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('s_node', TType::STRUCT, 4);
      $xfer += $this->s_node->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e_node !== null) {
      if (!is_object($this->e_node)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('e_node', TType::STRUCT, 5);
      $xfer += $this->e_node->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LinkAttrResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $err_no = null;
  /**
   * @var string
   */
  public $err_msg = null;
  /**
   * @var array
   */
  public $res = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'err_no',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'err_msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'res',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\DidiRoadNet\LinkAttr',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['err_no'])) {
        $this->err_no = $vals['err_no'];
      }
      if (isset($vals['err_msg'])) {
        $this->err_msg = $vals['err_msg'];
      }
      if (isset($vals['res'])) {
        $this->res = $vals['res'];
      }
    }
  }

  public function getName() {
    return 'LinkAttrResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->err_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->err_msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->res = array();
            $_size161 = 0;
            $_ktype162 = 0;
            $_vtype163 = 0;
            $xfer += $input->readMapBegin($_ktype162, $_vtype163, $_size161);
            for ($_i165 = 0; $_i165 < $_size161; ++$_i165)
            {
              $key166 = 0;
              $val167 = new \DidiRoadNet\LinkAttr();
              $xfer += $input->readI64($key166);
              $val167 = new \DidiRoadNet\LinkAttr();
              $xfer += $val167->read($input);
              $this->res[$key166] = $val167;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LinkAttrResponse');
    if ($this->err_no !== null) {
      $xfer += $output->writeFieldBegin('err_no', TType::I32, 1);
      $xfer += $output->writeI32($this->err_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err_msg !== null) {
      $xfer += $output->writeFieldBegin('err_msg', TType::STRING, 2);
      $xfer += $output->writeString($this->err_msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->res !== null) {
      if (!is_array($this->res)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('res', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->res));
        {
          foreach ($this->res as $kiter168 => $viter169)
          {
            $xfer += $output->writeI64($kiter168);
            $xfer += $viter169->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


