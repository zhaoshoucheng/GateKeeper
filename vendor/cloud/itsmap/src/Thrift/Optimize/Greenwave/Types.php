<?php
namespace Optimize\Greenwave;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class RouteGreenWaveOptResponse {
  static $_TSPEC;

  /**
   * @var string
   */
  public $errno = null;
  /**
   * @var string
   */
  public $errmsg = null;
  /**
   * @var \Optimize\Greenwave\JunctionOfRoute[]
   */
  public $opt_junction_list = null;
  /**
   * @var string
   */
  public $token = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errno',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errmsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'opt_junction_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Greenwave\JunctionOfRoute',
            ),
          ),
        4 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errno'])) {
        $this->errno = $vals['errno'];
      }
      if (isset($vals['errmsg'])) {
        $this->errmsg = $vals['errmsg'];
      }
      if (isset($vals['opt_junction_list'])) {
        $this->opt_junction_list = $vals['opt_junction_list'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
    }
  }

  public function getName() {
    return 'RouteGreenWaveOptResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errmsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->opt_junction_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Optimize\Greenwave\JunctionOfRoute();
              $xfer += $elem5->read($input);
              $this->opt_junction_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RouteGreenWaveOptResponse');
    if ($this->errno !== null) {
      $xfer += $output->writeFieldBegin('errno', TType::STRING, 1);
      $xfer += $output->writeString($this->errno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errmsg !== null) {
      $xfer += $output->writeFieldBegin('errmsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errmsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opt_junction_list !== null) {
      if (!is_array($this->opt_junction_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('opt_junction_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->opt_junction_list));
        {
          foreach ($this->opt_junction_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 4);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JunctionOfRoute {
  static $_TSPEC;

  /**
   * @var string
   */
  public $junction_id = null;
  /**
   * @var int
   */
  public $cycle = null;
  /**
   * @var int
   */
  public $offset = null;
  /**
   * @var int[]
   */
  public $forward_green_start = null;
  /**
   * @var int[]
   */
  public $forward_green_duration = null;
  /**
   * @var int[]
   */
  public $reverse_green_start = null;
  /**
   * @var int[]
   */
  public $reverse_green_duration = null;
  /**
   * @var bool
   */
  public $lock_cycle = null;
  /**
   * @var bool
   */
  public $lock_offset = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'junction_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cycle',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'forward_green_start',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'forward_green_duration',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        6 => array(
          'var' => 'reverse_green_start',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        7 => array(
          'var' => 'reverse_green_duration',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        8 => array(
          'var' => 'lock_cycle',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'lock_offset',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['junction_id'])) {
        $this->junction_id = $vals['junction_id'];
      }
      if (isset($vals['cycle'])) {
        $this->cycle = $vals['cycle'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['forward_green_start'])) {
        $this->forward_green_start = $vals['forward_green_start'];
      }
      if (isset($vals['forward_green_duration'])) {
        $this->forward_green_duration = $vals['forward_green_duration'];
      }
      if (isset($vals['reverse_green_start'])) {
        $this->reverse_green_start = $vals['reverse_green_start'];
      }
      if (isset($vals['reverse_green_duration'])) {
        $this->reverse_green_duration = $vals['reverse_green_duration'];
      }
      if (isset($vals['lock_cycle'])) {
        $this->lock_cycle = $vals['lock_cycle'];
      }
      if (isset($vals['lock_offset'])) {
        $this->lock_offset = $vals['lock_offset'];
      }
    }
  }

  public function getName() {
    return 'JunctionOfRoute';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->junction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cycle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->forward_green_start = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              $this->forward_green_start []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->forward_green_duration = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $xfer += $input->readI32($elem18);
              $this->forward_green_duration []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->reverse_green_start = array();
            $_size19 = 0;
            $_etype22 = 0;
            $xfer += $input->readListBegin($_etype22, $_size19);
            for ($_i23 = 0; $_i23 < $_size19; ++$_i23)
            {
              $elem24 = null;
              $xfer += $input->readI32($elem24);
              $this->reverse_green_start []= $elem24;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->reverse_green_duration = array();
            $_size25 = 0;
            $_etype28 = 0;
            $xfer += $input->readListBegin($_etype28, $_size25);
            for ($_i29 = 0; $_i29 < $_size25; ++$_i29)
            {
              $elem30 = null;
              $xfer += $input->readI32($elem30);
              $this->reverse_green_duration []= $elem30;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->lock_cycle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->lock_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JunctionOfRoute');
    if ($this->junction_id !== null) {
      $xfer += $output->writeFieldBegin('junction_id', TType::STRING, 1);
      $xfer += $output->writeString($this->junction_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cycle !== null) {
      $xfer += $output->writeFieldBegin('cycle', TType::I32, 2);
      $xfer += $output->writeI32($this->cycle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 3);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forward_green_start !== null) {
      if (!is_array($this->forward_green_start)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forward_green_start', TType::LST, 4);
      {
        $output->writeListBegin(TType::I32, count($this->forward_green_start));
        {
          foreach ($this->forward_green_start as $iter31)
          {
            $xfer += $output->writeI32($iter31);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forward_green_duration !== null) {
      if (!is_array($this->forward_green_duration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forward_green_duration', TType::LST, 5);
      {
        $output->writeListBegin(TType::I32, count($this->forward_green_duration));
        {
          foreach ($this->forward_green_duration as $iter32)
          {
            $xfer += $output->writeI32($iter32);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse_green_start !== null) {
      if (!is_array($this->reverse_green_start)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reverse_green_start', TType::LST, 6);
      {
        $output->writeListBegin(TType::I32, count($this->reverse_green_start));
        {
          foreach ($this->reverse_green_start as $iter33)
          {
            $xfer += $output->writeI32($iter33);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse_green_duration !== null) {
      if (!is_array($this->reverse_green_duration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reverse_green_duration', TType::LST, 7);
      {
        $output->writeListBegin(TType::I32, count($this->reverse_green_duration));
        {
          foreach ($this->reverse_green_duration as $iter34)
          {
            $xfer += $output->writeI32($iter34);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lock_cycle !== null) {
      $xfer += $output->writeFieldBegin('lock_cycle', TType::BOOL, 8);
      $xfer += $output->writeBool($this->lock_cycle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lock_offset !== null) {
      $xfer += $output->writeFieldBegin('lock_offset', TType::BOOL, 9);
      $xfer += $output->writeBool($this->lock_offset);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RouteMes {
  static $_TSPEC;

  /**
   * @var \Optimize\Greenwave\JunctionOfRoute[]
   */
  public $junction_list = null;
  /**
   * @var int[]
   */
  public $forward_length = null;
  /**
   * @var double[]
   */
  public $forward_speed = null;
  /**
   * @var int[]
   */
  public $reverse_length = null;
  /**
   * @var double[]
   */
  public $reverse_speed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'junction_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Greenwave\JunctionOfRoute',
            ),
          ),
        2 => array(
          'var' => 'forward_length',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'forward_speed',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        4 => array(
          'var' => 'reverse_length',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'reverse_speed',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['junction_list'])) {
        $this->junction_list = $vals['junction_list'];
      }
      if (isset($vals['forward_length'])) {
        $this->forward_length = $vals['forward_length'];
      }
      if (isset($vals['forward_speed'])) {
        $this->forward_speed = $vals['forward_speed'];
      }
      if (isset($vals['reverse_length'])) {
        $this->reverse_length = $vals['reverse_length'];
      }
      if (isset($vals['reverse_speed'])) {
        $this->reverse_speed = $vals['reverse_speed'];
      }
    }
  }

  public function getName() {
    return 'RouteMes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->junction_list = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \Optimize\Greenwave\JunctionOfRoute();
              $xfer += $elem40->read($input);
              $this->junction_list []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->forward_length = array();
            $_size41 = 0;
            $_etype44 = 0;
            $xfer += $input->readListBegin($_etype44, $_size41);
            for ($_i45 = 0; $_i45 < $_size41; ++$_i45)
            {
              $elem46 = null;
              $xfer += $input->readI32($elem46);
              $this->forward_length []= $elem46;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->forward_speed = array();
            $_size47 = 0;
            $_etype50 = 0;
            $xfer += $input->readListBegin($_etype50, $_size47);
            for ($_i51 = 0; $_i51 < $_size47; ++$_i51)
            {
              $elem52 = null;
              $xfer += $input->readDouble($elem52);
              $this->forward_speed []= $elem52;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->reverse_length = array();
            $_size53 = 0;
            $_etype56 = 0;
            $xfer += $input->readListBegin($_etype56, $_size53);
            for ($_i57 = 0; $_i57 < $_size53; ++$_i57)
            {
              $elem58 = null;
              $xfer += $input->readI32($elem58);
              $this->reverse_length []= $elem58;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->reverse_speed = array();
            $_size59 = 0;
            $_etype62 = 0;
            $xfer += $input->readListBegin($_etype62, $_size59);
            for ($_i63 = 0; $_i63 < $_size59; ++$_i63)
            {
              $elem64 = null;
              $xfer += $input->readDouble($elem64);
              $this->reverse_speed []= $elem64;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RouteMes');
    if ($this->junction_list !== null) {
      if (!is_array($this->junction_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('junction_list', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->junction_list));
        {
          foreach ($this->junction_list as $iter65)
          {
            $xfer += $iter65->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forward_length !== null) {
      if (!is_array($this->forward_length)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forward_length', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->forward_length));
        {
          foreach ($this->forward_length as $iter66)
          {
            $xfer += $output->writeI32($iter66);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forward_speed !== null) {
      if (!is_array($this->forward_speed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forward_speed', TType::LST, 3);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->forward_speed));
        {
          foreach ($this->forward_speed as $iter67)
          {
            $xfer += $output->writeDouble($iter67);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse_length !== null) {
      if (!is_array($this->reverse_length)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reverse_length', TType::LST, 4);
      {
        $output->writeListBegin(TType::I32, count($this->reverse_length));
        {
          foreach ($this->reverse_length as $iter68)
          {
            $xfer += $output->writeI32($iter68);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse_speed !== null) {
      if (!is_array($this->reverse_speed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reverse_speed', TType::LST, 5);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->reverse_speed));
        {
          foreach ($this->reverse_speed as $iter69)
          {
            $xfer += $output->writeDouble($iter69);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


