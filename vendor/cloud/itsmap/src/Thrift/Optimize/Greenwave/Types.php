<?php
namespace Optimize\Greenwave;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Green {
  static $_TSPEC;

  /**
   * @var int
   */
  public $green_start = null;
  /**
   * @var int
   */
  public $green_duration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'green_start',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'green_duration',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['green_start'])) {
        $this->green_start = $vals['green_start'];
      }
      if (isset($vals['green_duration'])) {
        $this->green_duration = $vals['green_duration'];
      }
    }
  }

  public function getName() {
    return 'Green';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->green_start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->green_duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Green');
    if ($this->green_start !== null) {
      $xfer += $output->writeFieldBegin('green_start', TType::I32, 1);
      $xfer += $output->writeI32($this->green_start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->green_duration !== null) {
      $xfer += $output->writeFieldBegin('green_duration', TType::I32, 2);
      $xfer += $output->writeI32($this->green_duration);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JunctionOfRoute {
  static $_TSPEC;

  /**
   * @var string
   */
  public $junction_id = null;
  /**
   * @var int
   */
  public $cycle = null;
  /**
   * @var int
   */
  public $offset = null;
  /**
   * @var \Optimize\Greenwave\Green[]
   */
  public $forward_green = null;
  /**
   * @var \Optimize\Greenwave\Green[]
   */
  public $reverse_green = null;
  /**
   * @var int
   */
  public $lock_cycle = null;
  /**
   * @var int
   */
  public $lock_offset = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'junction_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cycle',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'forward_green',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Greenwave\Green',
            ),
          ),
        5 => array(
          'var' => 'reverse_green',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Greenwave\Green',
            ),
          ),
        6 => array(
          'var' => 'lock_cycle',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'lock_offset',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['junction_id'])) {
        $this->junction_id = $vals['junction_id'];
      }
      if (isset($vals['cycle'])) {
        $this->cycle = $vals['cycle'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['forward_green'])) {
        $this->forward_green = $vals['forward_green'];
      }
      if (isset($vals['reverse_green'])) {
        $this->reverse_green = $vals['reverse_green'];
      }
      if (isset($vals['lock_cycle'])) {
        $this->lock_cycle = $vals['lock_cycle'];
      }
      if (isset($vals['lock_offset'])) {
        $this->lock_offset = $vals['lock_offset'];
      }
    }
  }

  public function getName() {
    return 'JunctionOfRoute';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->junction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cycle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->forward_green = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Optimize\Greenwave\Green();
              $xfer += $elem5->read($input);
              $this->forward_green []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->reverse_green = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \Optimize\Greenwave\Green();
              $xfer += $elem11->read($input);
              $this->reverse_green []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lock_cycle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lock_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JunctionOfRoute');
    if ($this->junction_id !== null) {
      $xfer += $output->writeFieldBegin('junction_id', TType::STRING, 1);
      $xfer += $output->writeString($this->junction_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cycle !== null) {
      $xfer += $output->writeFieldBegin('cycle', TType::I32, 2);
      $xfer += $output->writeI32($this->cycle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 3);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forward_green !== null) {
      if (!is_array($this->forward_green)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forward_green', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->forward_green));
        {
          foreach ($this->forward_green as $iter12)
          {
            $xfer += $iter12->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse_green !== null) {
      if (!is_array($this->reverse_green)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reverse_green', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->reverse_green));
        {
          foreach ($this->reverse_green as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lock_cycle !== null) {
      $xfer += $output->writeFieldBegin('lock_cycle', TType::I32, 6);
      $xfer += $output->writeI32($this->lock_cycle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lock_offset !== null) {
      $xfer += $output->writeFieldBegin('lock_offset', TType::I32, 7);
      $xfer += $output->writeI32($this->lock_offset);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RouteMes {
  static $_TSPEC;

  /**
   * @var \Optimize\Greenwave\JunctionOfRoute[]
   */
  public $junction_list = null;
  /**
   * @var int[]
   */
  public $forward_length = null;
  /**
   * @var double[]
   */
  public $forward_speed = null;
  /**
   * @var int[]
   */
  public $reverse_length = null;
  /**
   * @var double[]
   */
  public $reverse_speed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'junction_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Greenwave\JunctionOfRoute',
            ),
          ),
        2 => array(
          'var' => 'forward_length',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'forward_speed',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        4 => array(
          'var' => 'reverse_length',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'reverse_speed',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['junction_list'])) {
        $this->junction_list = $vals['junction_list'];
      }
      if (isset($vals['forward_length'])) {
        $this->forward_length = $vals['forward_length'];
      }
      if (isset($vals['forward_speed'])) {
        $this->forward_speed = $vals['forward_speed'];
      }
      if (isset($vals['reverse_length'])) {
        $this->reverse_length = $vals['reverse_length'];
      }
      if (isset($vals['reverse_speed'])) {
        $this->reverse_speed = $vals['reverse_speed'];
      }
    }
  }

  public function getName() {
    return 'RouteMes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->junction_list = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \Optimize\Greenwave\JunctionOfRoute();
              $xfer += $elem19->read($input);
              $this->junction_list []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->forward_length = array();
            $_size20 = 0;
            $_etype23 = 0;
            $xfer += $input->readListBegin($_etype23, $_size20);
            for ($_i24 = 0; $_i24 < $_size20; ++$_i24)
            {
              $elem25 = null;
              $xfer += $input->readI32($elem25);
              $this->forward_length []= $elem25;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->forward_speed = array();
            $_size26 = 0;
            $_etype29 = 0;
            $xfer += $input->readListBegin($_etype29, $_size26);
            for ($_i30 = 0; $_i30 < $_size26; ++$_i30)
            {
              $elem31 = null;
              $xfer += $input->readDouble($elem31);
              $this->forward_speed []= $elem31;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->reverse_length = array();
            $_size32 = 0;
            $_etype35 = 0;
            $xfer += $input->readListBegin($_etype35, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $elem37 = null;
              $xfer += $input->readI32($elem37);
              $this->reverse_length []= $elem37;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->reverse_speed = array();
            $_size38 = 0;
            $_etype41 = 0;
            $xfer += $input->readListBegin($_etype41, $_size38);
            for ($_i42 = 0; $_i42 < $_size38; ++$_i42)
            {
              $elem43 = null;
              $xfer += $input->readDouble($elem43);
              $this->reverse_speed []= $elem43;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RouteMes');
    if ($this->junction_list !== null) {
      if (!is_array($this->junction_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('junction_list', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->junction_list));
        {
          foreach ($this->junction_list as $iter44)
          {
            $xfer += $iter44->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forward_length !== null) {
      if (!is_array($this->forward_length)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forward_length', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->forward_length));
        {
          foreach ($this->forward_length as $iter45)
          {
            $xfer += $output->writeI32($iter45);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forward_speed !== null) {
      if (!is_array($this->forward_speed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forward_speed', TType::LST, 3);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->forward_speed));
        {
          foreach ($this->forward_speed as $iter46)
          {
            $xfer += $output->writeDouble($iter46);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse_length !== null) {
      if (!is_array($this->reverse_length)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reverse_length', TType::LST, 4);
      {
        $output->writeListBegin(TType::I32, count($this->reverse_length));
        {
          foreach ($this->reverse_length as $iter47)
          {
            $xfer += $output->writeI32($iter47);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse_speed !== null) {
      if (!is_array($this->reverse_speed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reverse_speed', TType::LST, 5);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->reverse_speed));
        {
          foreach ($this->reverse_speed as $iter48)
          {
            $xfer += $output->writeDouble($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RouteGreenWaveOptResponse {
  static $_TSPEC;

  /**
   * @var string
   */
  public $errno = null;
  /**
   * @var string
   */
  public $errmsg = null;
  /**
   * @var \Optimize\Greenwave\JunctionOfRoute[]
   */
  public $opt_junction_list = null;
  /**
   * @var string
   */
  public $token = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errno',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errmsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'opt_junction_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Greenwave\JunctionOfRoute',
            ),
          ),
        4 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errno'])) {
        $this->errno = $vals['errno'];
      }
      if (isset($vals['errmsg'])) {
        $this->errmsg = $vals['errmsg'];
      }
      if (isset($vals['opt_junction_list'])) {
        $this->opt_junction_list = $vals['opt_junction_list'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
    }
  }

  public function getName() {
    return 'RouteGreenWaveOptResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errmsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->opt_junction_list = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new \Optimize\Greenwave\JunctionOfRoute();
              $xfer += $elem54->read($input);
              $this->opt_junction_list []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RouteGreenWaveOptResponse');
    if ($this->errno !== null) {
      $xfer += $output->writeFieldBegin('errno', TType::STRING, 1);
      $xfer += $output->writeString($this->errno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errmsg !== null) {
      $xfer += $output->writeFieldBegin('errmsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errmsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opt_junction_list !== null) {
      if (!is_array($this->opt_junction_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('opt_junction_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->opt_junction_list));
        {
          foreach ($this->opt_junction_list as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 4);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


