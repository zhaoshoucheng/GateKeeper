<?php
namespace Optimize\Spacetimediagram;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class MatchPoint {
  static $_TSPEC;

  /**
   * @var int
   */
  public $distance = null;
  /**
   * @var int
   */
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'distance',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['distance'])) {
        $this->distance = $vals['distance'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
    }
  }

  public function getName() {
    return 'MatchPoint';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->distance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MatchPoint');
    if ($this->distance !== null) {
      $xfer += $output->writeFieldBegin('distance', TType::I32, 1);
      $xfer += $output->writeI32($this->distance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I32, 2);
      $xfer += $output->writeI32($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JunctionResponse {
  static $_TSPEC;

  /**
   * @var string
   */
  public $juction_id = null;
  /**
   * @var (\Optimize\Spacetimediagram\MatchPoint[])[]
   */
  public $forward_traj = null;
  /**
   * @var double
   */
  public $forward_speed = null;
  /**
   * @var (\Optimize\Spacetimediagram\MatchPoint[])[]
   */
  public $reverse_traj = null;
  /**
   * @var double
   */
  public $reverse_speed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'juction_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'forward_traj',
          'type' => TType::LST,
          'etype' => TType::LST,
          'elem' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\Optimize\Spacetimediagram\MatchPoint',
              ),
            ),
          ),
        3 => array(
          'var' => 'forward_speed',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'reverse_traj',
          'type' => TType::LST,
          'etype' => TType::LST,
          'elem' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\Optimize\Spacetimediagram\MatchPoint',
              ),
            ),
          ),
        5 => array(
          'var' => 'reverse_speed',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['juction_id'])) {
        $this->juction_id = $vals['juction_id'];
      }
      if (isset($vals['forward_traj'])) {
        $this->forward_traj = $vals['forward_traj'];
      }
      if (isset($vals['forward_speed'])) {
        $this->forward_speed = $vals['forward_speed'];
      }
      if (isset($vals['reverse_traj'])) {
        $this->reverse_traj = $vals['reverse_traj'];
      }
      if (isset($vals['reverse_speed'])) {
        $this->reverse_speed = $vals['reverse_speed'];
      }
    }
  }

  public function getName() {
    return 'JunctionResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->juction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->forward_traj = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = array();
              $_size6 = 0;
              $_etype9 = 0;
              $xfer += $input->readListBegin($_etype9, $_size6);
              for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
              {
                $elem11 = null;
                $elem11 = new \Optimize\Spacetimediagram\MatchPoint();
                $xfer += $elem11->read($input);
                $elem5 []= $elem11;
              }
              $xfer += $input->readListEnd();
              $this->forward_traj []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->forward_speed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->reverse_traj = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $elem17 = array();
              $_size18 = 0;
              $_etype21 = 0;
              $xfer += $input->readListBegin($_etype21, $_size18);
              for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
              {
                $elem23 = null;
                $elem23 = new \Optimize\Spacetimediagram\MatchPoint();
                $xfer += $elem23->read($input);
                $elem17 []= $elem23;
              }
              $xfer += $input->readListEnd();
              $this->reverse_traj []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->reverse_speed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JunctionResponse');
    if ($this->juction_id !== null) {
      $xfer += $output->writeFieldBegin('juction_id', TType::STRING, 1);
      $xfer += $output->writeString($this->juction_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forward_traj !== null) {
      if (!is_array($this->forward_traj)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forward_traj', TType::LST, 2);
      {
        $output->writeListBegin(TType::LST, count($this->forward_traj));
        {
          foreach ($this->forward_traj as $iter24)
          {
            {
              $output->writeListBegin(TType::STRUCT, count($iter24));
              {
                foreach ($iter24 as $iter25)
                {
                  $xfer += $iter25->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forward_speed !== null) {
      $xfer += $output->writeFieldBegin('forward_speed', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->forward_speed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse_traj !== null) {
      if (!is_array($this->reverse_traj)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reverse_traj', TType::LST, 4);
      {
        $output->writeListBegin(TType::LST, count($this->reverse_traj));
        {
          foreach ($this->reverse_traj as $iter26)
          {
            {
              $output->writeListBegin(TType::STRUCT, count($iter26));
              {
                foreach ($iter26 as $iter27)
                {
                  $xfer += $iter27->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse_speed !== null) {
      $xfer += $output->writeFieldBegin('reverse_speed', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->reverse_speed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContinueTSGraphResponse {
  static $_TSPEC;

  /**
   * @var string
   */
  public $errno = null;
  /**
   * @var string
   */
  public $errmsg = null;
  /**
   * @var \Optimize\Spacetimediagram\JunctionResponse[]
   */
  public $junction_mes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errno',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errmsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'junction_mes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Spacetimediagram\JunctionResponse',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errno'])) {
        $this->errno = $vals['errno'];
      }
      if (isset($vals['errmsg'])) {
        $this->errmsg = $vals['errmsg'];
      }
      if (isset($vals['junction_mes'])) {
        $this->junction_mes = $vals['junction_mes'];
      }
    }
  }

  public function getName() {
    return 'ContinueTSGraphResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errmsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->junction_mes = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \Optimize\Spacetimediagram\JunctionResponse();
              $xfer += $elem33->read($input);
              $this->junction_mes []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContinueTSGraphResponse');
    if ($this->errno !== null) {
      $xfer += $output->writeFieldBegin('errno', TType::STRING, 1);
      $xfer += $output->writeString($this->errno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errmsg !== null) {
      $xfer += $output->writeFieldBegin('errmsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errmsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->junction_mes !== null) {
      if (!is_array($this->junction_mes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('junction_mes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->junction_mes));
        {
          foreach ($this->junction_mes as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RouteJunction {
  static $_TSPEC;

  /**
   * @var string
   */
  public $junction_id = null;
  /**
   * @var string
   */
  public $forward_flow_id = null;
  /**
   * @var string
   */
  public $reverse_flow_id = null;
  /**
   * @var string
   */
  public $tod_start_time = null;
  /**
   * @var string
   */
  public $tod_end_time = null;
  /**
   * @var int
   */
  public $cycle = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'junction_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'forward_flow_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'reverse_flow_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tod_start_time',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'tod_end_time',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'cycle',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['junction_id'])) {
        $this->junction_id = $vals['junction_id'];
      }
      if (isset($vals['forward_flow_id'])) {
        $this->forward_flow_id = $vals['forward_flow_id'];
      }
      if (isset($vals['reverse_flow_id'])) {
        $this->reverse_flow_id = $vals['reverse_flow_id'];
      }
      if (isset($vals['tod_start_time'])) {
        $this->tod_start_time = $vals['tod_start_time'];
      }
      if (isset($vals['tod_end_time'])) {
        $this->tod_end_time = $vals['tod_end_time'];
      }
      if (isset($vals['cycle'])) {
        $this->cycle = $vals['cycle'];
      }
    }
  }

  public function getName() {
    return 'RouteJunction';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->junction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forward_flow_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reverse_flow_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tod_start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tod_end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cycle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RouteJunction');
    if ($this->junction_id !== null) {
      $xfer += $output->writeFieldBegin('junction_id', TType::STRING, 1);
      $xfer += $output->writeString($this->junction_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forward_flow_id !== null) {
      $xfer += $output->writeFieldBegin('forward_flow_id', TType::STRING, 2);
      $xfer += $output->writeString($this->forward_flow_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reverse_flow_id !== null) {
      $xfer += $output->writeFieldBegin('reverse_flow_id', TType::STRING, 3);
      $xfer += $output->writeString($this->reverse_flow_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tod_start_time !== null) {
      $xfer += $output->writeFieldBegin('tod_start_time', TType::STRING, 4);
      $xfer += $output->writeString($this->tod_start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tod_end_time !== null) {
      $xfer += $output->writeFieldBegin('tod_end_time', TType::STRING, 5);
      $xfer += $output->writeString($this->tod_end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cycle !== null) {
      $xfer += $output->writeFieldBegin('cycle', TType::I32, 6);
      $xfer += $output->writeI32($this->cycle);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


