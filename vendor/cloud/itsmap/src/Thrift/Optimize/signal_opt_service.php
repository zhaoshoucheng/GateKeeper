<?php
namespace Optimize;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface signal_opt_serviceIf {
  /**
   * @param \Optimize\Version[] $version
   * @param \Optimize\Greensplit\SignalPlan $origin_signal_plan
   * @return \Optimize\Greensplit\GreenSplitOptResponse
   */
  public function green_split_opt(array $version, \Optimize\Greensplit\SignalPlan $origin_signal_plan);
  /**
   * @param \Optimize\Greenwave\RouteMes $route_mes
   * @param int $direction_method
   * @param string $token
   * @return \Optimize\Greenwave\RouteGreenWaveOptResponse
   */
  public function route_green_wave_opt(\Optimize\Greenwave\RouteMes $route_mes, $direction_method, $token);
  /**
   * @param \Optimize\Version[] $version
   * @param int $direction_method
   * @param \Optimize\Spacetimediagram\RouteJunction[] $route_junction
   * @return \Optimize\Spacetimediagram\ContinueTSGraphResponse
   */
  public function continue_ts_filter(array $version, $direction_method, array $route_junction);
  /**
   * @param \Optimize\Version[] $versions
   * @param \Optimize\Tod\JunctionMovements[] $junction_movements
   * @param int $tod_cnt
   * @return \Optimize\Tod\TodResponse
   */
  public function tod_opt(array $versions, array $junction_movements, $tod_cnt);
}


class signal_opt_serviceClient implements \Optimize\signal_opt_serviceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function green_split_opt(array $version, \Optimize\Greensplit\SignalPlan $origin_signal_plan)
  {
    $this->send_green_split_opt($version, $origin_signal_plan);
    return $this->recv_green_split_opt();
  }

  public function send_green_split_opt(array $version, \Optimize\Greensplit\SignalPlan $origin_signal_plan)
  {
    $args = new \Optimize\signal_opt_service_green_split_opt_args();
    $args->version = $version;
    $args->origin_signal_plan = $origin_signal_plan;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'green_split_opt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('green_split_opt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_green_split_opt()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Optimize\signal_opt_service_green_split_opt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Optimize\signal_opt_service_green_split_opt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("green_split_opt failed: unknown result");
  }

  public function route_green_wave_opt(\Optimize\Greenwave\RouteMes $route_mes, $direction_method, $token)
  {
    $this->send_route_green_wave_opt($route_mes, $direction_method, $token);
    return $this->recv_route_green_wave_opt();
  }

  public function send_route_green_wave_opt(\Optimize\Greenwave\RouteMes $route_mes, $direction_method, $token)
  {
    $args = new \Optimize\signal_opt_service_route_green_wave_opt_args();
    $args->route_mes = $route_mes;
    $args->direction_method = $direction_method;
    $args->token = $token;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'route_green_wave_opt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('route_green_wave_opt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_route_green_wave_opt()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Optimize\signal_opt_service_route_green_wave_opt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Optimize\signal_opt_service_route_green_wave_opt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("route_green_wave_opt failed: unknown result");
  }

  public function continue_ts_filter(array $version, $direction_method, array $route_junction)
  {
    $this->send_continue_ts_filter($version, $direction_method, $route_junction);
    return $this->recv_continue_ts_filter();
  }

  public function send_continue_ts_filter(array $version, $direction_method, array $route_junction)
  {
    $args = new \Optimize\signal_opt_service_continue_ts_filter_args();
    $args->version = $version;
    $args->direction_method = $direction_method;
    $args->route_junction = $route_junction;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'continue_ts_filter', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('continue_ts_filter', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_continue_ts_filter()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Optimize\signal_opt_service_continue_ts_filter_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Optimize\signal_opt_service_continue_ts_filter_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("continue_ts_filter failed: unknown result");
  }

  public function tod_opt(array $versions, array $junction_movements, $tod_cnt)
  {
    $this->send_tod_opt($versions, $junction_movements, $tod_cnt);
    return $this->recv_tod_opt();
  }

  public function send_tod_opt(array $versions, array $junction_movements, $tod_cnt)
  {
    $args = new \Optimize\signal_opt_service_tod_opt_args();
    $args->versions = $versions;
    $args->junction_movements = $junction_movements;
    $args->tod_cnt = $tod_cnt;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'tod_opt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('tod_opt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_tod_opt()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Optimize\signal_opt_service_tod_opt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Optimize\signal_opt_service_tod_opt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("tod_opt failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class signal_opt_service_green_split_opt_args {
  static $_TSPEC;

  /**
   * @var \Optimize\Version[]
   */
  public $version = null;
  /**
   * @var \Optimize\Greensplit\SignalPlan
   */
  public $origin_signal_plan = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Version',
            ),
          ),
        2 => array(
          'var' => 'origin_signal_plan',
          'type' => TType::STRUCT,
          'class' => '\Optimize\Greensplit\SignalPlan',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['origin_signal_plan'])) {
        $this->origin_signal_plan = $vals['origin_signal_plan'];
      }
    }
  }

  public function getName() {
    return 'signal_opt_service_green_split_opt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->version = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Optimize\Version();
              $xfer += $elem5->read($input);
              $this->version []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->origin_signal_plan = new \Optimize\Greensplit\SignalPlan();
            $xfer += $this->origin_signal_plan->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('signal_opt_service_green_split_opt_args');
    if ($this->version !== null) {
      if (!is_array($this->version)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('version', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->version));
        {
          foreach ($this->version as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->origin_signal_plan !== null) {
      if (!is_object($this->origin_signal_plan)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('origin_signal_plan', TType::STRUCT, 2);
      $xfer += $this->origin_signal_plan->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class signal_opt_service_green_split_opt_result {
  static $_TSPEC;

  /**
   * @var \Optimize\Greensplit\GreenSplitOptResponse
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Optimize\Greensplit\GreenSplitOptResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'signal_opt_service_green_split_opt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Optimize\Greensplit\GreenSplitOptResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('signal_opt_service_green_split_opt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class signal_opt_service_route_green_wave_opt_args {
  static $_TSPEC;

  /**
   * @var \Optimize\Greenwave\RouteMes
   */
  public $route_mes = null;
  /**
   * @var int
   */
  public $direction_method = null;
  /**
   * @var string
   */
  public $token = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'route_mes',
          'type' => TType::STRUCT,
          'class' => '\Optimize\Greenwave\RouteMes',
          ),
        2 => array(
          'var' => 'direction_method',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['route_mes'])) {
        $this->route_mes = $vals['route_mes'];
      }
      if (isset($vals['direction_method'])) {
        $this->direction_method = $vals['direction_method'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
    }
  }

  public function getName() {
    return 'signal_opt_service_route_green_wave_opt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->route_mes = new \Optimize\Greenwave\RouteMes();
            $xfer += $this->route_mes->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->direction_method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('signal_opt_service_route_green_wave_opt_args');
    if ($this->route_mes !== null) {
      if (!is_object($this->route_mes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('route_mes', TType::STRUCT, 1);
      $xfer += $this->route_mes->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direction_method !== null) {
      $xfer += $output->writeFieldBegin('direction_method', TType::I32, 2);
      $xfer += $output->writeI32($this->direction_method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 3);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class signal_opt_service_route_green_wave_opt_result {
  static $_TSPEC;

  /**
   * @var \Optimize\Greenwave\RouteGreenWaveOptResponse
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Optimize\Greenwave\RouteGreenWaveOptResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'signal_opt_service_route_green_wave_opt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Optimize\Greenwave\RouteGreenWaveOptResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('signal_opt_service_route_green_wave_opt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class signal_opt_service_continue_ts_filter_args {
  static $_TSPEC;

  /**
   * @var \Optimize\Version[]
   */
  public $version = null;
  /**
   * @var int
   */
  public $direction_method = null;
  /**
   * @var \Optimize\Spacetimediagram\RouteJunction[]
   */
  public $route_junction = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Version',
            ),
          ),
        2 => array(
          'var' => 'direction_method',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'route_junction',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Spacetimediagram\RouteJunction',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['direction_method'])) {
        $this->direction_method = $vals['direction_method'];
      }
      if (isset($vals['route_junction'])) {
        $this->route_junction = $vals['route_junction'];
      }
    }
  }

  public function getName() {
    return 'signal_opt_service_continue_ts_filter_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->version = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \Optimize\Version();
              $xfer += $elem12->read($input);
              $this->version []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->direction_method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->route_junction = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $elem18 = new \Optimize\Spacetimediagram\RouteJunction();
              $xfer += $elem18->read($input);
              $this->route_junction []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('signal_opt_service_continue_ts_filter_args');
    if ($this->version !== null) {
      if (!is_array($this->version)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('version', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->version));
        {
          foreach ($this->version as $iter19)
          {
            $xfer += $iter19->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->direction_method !== null) {
      $xfer += $output->writeFieldBegin('direction_method', TType::I32, 2);
      $xfer += $output->writeI32($this->direction_method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->route_junction !== null) {
      if (!is_array($this->route_junction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('route_junction', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->route_junction));
        {
          foreach ($this->route_junction as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class signal_opt_service_continue_ts_filter_result {
  static $_TSPEC;

  /**
   * @var \Optimize\Spacetimediagram\ContinueTSGraphResponse
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Optimize\Spacetimediagram\ContinueTSGraphResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'signal_opt_service_continue_ts_filter_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Optimize\Spacetimediagram\ContinueTSGraphResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('signal_opt_service_continue_ts_filter_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class signal_opt_service_tod_opt_args {
  static $_TSPEC;

  /**
   * @var \Optimize\Version[]
   */
  public $versions = null;
  /**
   * @var \Optimize\Tod\JunctionMovements[]
   */
  public $junction_movements = null;
  /**
   * @var int
   */
  public $tod_cnt = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'versions',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Version',
            ),
          ),
        2 => array(
          'var' => 'junction_movements',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Optimize\Tod\JunctionMovements',
            ),
          ),
        3 => array(
          'var' => 'tod_cnt',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['versions'])) {
        $this->versions = $vals['versions'];
      }
      if (isset($vals['junction_movements'])) {
        $this->junction_movements = $vals['junction_movements'];
      }
      if (isset($vals['tod_cnt'])) {
        $this->tod_cnt = $vals['tod_cnt'];
      }
    }
  }

  public function getName() {
    return 'signal_opt_service_tod_opt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->versions = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \Optimize\Version();
              $xfer += $elem26->read($input);
              $this->versions []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->junction_movements = array();
            $_size27 = 0;
            $_etype30 = 0;
            $xfer += $input->readListBegin($_etype30, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $elem32 = null;
              $elem32 = new \Optimize\Tod\JunctionMovements();
              $xfer += $elem32->read($input);
              $this->junction_movements []= $elem32;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tod_cnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('signal_opt_service_tod_opt_args');
    if ($this->versions !== null) {
      if (!is_array($this->versions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('versions', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->versions));
        {
          foreach ($this->versions as $iter33)
          {
            $xfer += $iter33->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->junction_movements !== null) {
      if (!is_array($this->junction_movements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('junction_movements', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->junction_movements));
        {
          foreach ($this->junction_movements as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tod_cnt !== null) {
      $xfer += $output->writeFieldBegin('tod_cnt', TType::I32, 3);
      $xfer += $output->writeI32($this->tod_cnt);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class signal_opt_service_tod_opt_result {
  static $_TSPEC;

  /**
   * @var \Optimize\Tod\TodResponse
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Optimize\Tod\TodResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'signal_opt_service_tod_opt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Optimize\Tod\TodResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('signal_opt_service_tod_opt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


