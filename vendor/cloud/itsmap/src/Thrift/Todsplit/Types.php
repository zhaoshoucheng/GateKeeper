<?php
namespace Todsplit;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class MovementSignal {
  static $_TSPEC;

  /**
   * @var string
   */
  public $logic_flow_id = null;
  /**
   * @var int[]
   */
  public $green_start = null;
  /**
   * @var int[]
   */
  public $green_duration = null;
  /**
   * @var int[]
   */
  public $yellow = null;
  /**
   * @var int[]
   */
  public $red_clean = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'logic_flow_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'green_start',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'green_duration',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'yellow',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'red_clean',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['logic_flow_id'])) {
        $this->logic_flow_id = $vals['logic_flow_id'];
      }
      if (isset($vals['green_start'])) {
        $this->green_start = $vals['green_start'];
      }
      if (isset($vals['green_duration'])) {
        $this->green_duration = $vals['green_duration'];
      }
      if (isset($vals['yellow'])) {
        $this->yellow = $vals['yellow'];
      }
      if (isset($vals['red_clean'])) {
        $this->red_clean = $vals['red_clean'];
      }
    }
  }

  public function getName() {
    return 'MovementSignal';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logic_flow_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->green_start = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->green_start []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->green_duration = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readI32($elem11);
              $this->green_duration []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->yellow = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readI32($elem17);
              $this->yellow []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->red_clean = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $xfer += $input->readI32($elem23);
              $this->red_clean []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MovementSignal');
    if ($this->logic_flow_id !== null) {
      $xfer += $output->writeFieldBegin('logic_flow_id', TType::STRING, 1);
      $xfer += $output->writeString($this->logic_flow_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->green_start !== null) {
      if (!is_array($this->green_start)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('green_start', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->green_start));
        {
          foreach ($this->green_start as $iter24)
          {
            $xfer += $output->writeI32($iter24);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->green_duration !== null) {
      if (!is_array($this->green_duration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('green_duration', TType::LST, 3);
      {
        $output->writeListBegin(TType::I32, count($this->green_duration));
        {
          foreach ($this->green_duration as $iter25)
          {
            $xfer += $output->writeI32($iter25);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yellow !== null) {
      if (!is_array($this->yellow)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('yellow', TType::LST, 4);
      {
        $output->writeListBegin(TType::I32, count($this->yellow));
        {
          foreach ($this->yellow as $iter26)
          {
            $xfer += $output->writeI32($iter26);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->red_clean !== null) {
      if (!is_array($this->red_clean)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('red_clean', TType::LST, 5);
      {
        $output->writeListBegin(TType::I32, count($this->red_clean));
        {
          foreach ($this->red_clean as $iter27)
          {
            $xfer += $output->writeI32($iter27);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SignalPlan {
  static $_TSPEC;

  /**
   * @var string
   */
  public $logic_junction_id = null;
  /**
   * @var string
   */
  public $dates = null;
  /**
   * @var string
   */
  public $start_time = null;
  /**
   * @var string
   */
  public $end_time = null;
  /**
   * @var int
   */
  public $cycle = null;
  /**
   * @var int
   */
  public $offset = null;
  /**
   * @var int
   */
  public $clock_shift = null;
  /**
   * @var \Todsplit\MovementSignal[]
   */
  public $signal = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'logic_junction_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'dates',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'start_time',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'end_time',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'cycle',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'clock_shift',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'signal',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Todsplit\MovementSignal',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['logic_junction_id'])) {
        $this->logic_junction_id = $vals['logic_junction_id'];
      }
      if (isset($vals['dates'])) {
        $this->dates = $vals['dates'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['cycle'])) {
        $this->cycle = $vals['cycle'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['clock_shift'])) {
        $this->clock_shift = $vals['clock_shift'];
      }
      if (isset($vals['signal'])) {
        $this->signal = $vals['signal'];
      }
    }
  }

  public function getName() {
    return 'SignalPlan';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logic_junction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dates);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cycle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->clock_shift);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->signal = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \Todsplit\MovementSignal();
              $xfer += $elem33->read($input);
              $this->signal []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SignalPlan');
    if ($this->logic_junction_id !== null) {
      $xfer += $output->writeFieldBegin('logic_junction_id', TType::STRING, 1);
      $xfer += $output->writeString($this->logic_junction_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dates !== null) {
      $xfer += $output->writeFieldBegin('dates', TType::STRING, 2);
      $xfer += $output->writeString($this->dates);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::STRING, 3);
      $xfer += $output->writeString($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::STRING, 4);
      $xfer += $output->writeString($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cycle !== null) {
      $xfer += $output->writeFieldBegin('cycle', TType::I32, 5);
      $xfer += $output->writeI32($this->cycle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 6);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clock_shift !== null) {
      $xfer += $output->writeFieldBegin('clock_shift', TType::I32, 7);
      $xfer += $output->writeI32($this->clock_shift);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signal !== null) {
      if (!is_array($this->signal)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('signal', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->signal));
        {
          foreach ($this->signal as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Version {
  static $_TSPEC;

  /**
   * @var string
   */
  public $map_version = null;
  /**
   * @var string
   */
  public $date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'map_version',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['map_version'])) {
        $this->map_version = $vals['map_version'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
    }
  }

  public function getName() {
    return 'Version';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->map_version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Version');
    if ($this->map_version !== null) {
      $xfer += $output->writeFieldBegin('map_version', TType::STRING, 1);
      $xfer += $output->writeString($this->map_version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GreenSplitOptResponse {
  static $_TSPEC;

  /**
   * @var string
   */
  public $errno = null;
  /**
   * @var string
   */
  public $errmsg = null;
  /**
   * @var \Todsplit\SignalPlan
   */
  public $green_split_opt_signal_plan = null;
  /**
   * @var string[]
   */
  public $over_saturation_flow = null;
  /**
   * @var string[]
   */
  public $green_loss_flow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errno',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errmsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'green_split_opt_signal_plan',
          'type' => TType::STRUCT,
          'class' => '\Todsplit\SignalPlan',
          ),
        4 => array(
          'var' => 'over_saturation_flow',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'green_loss_flow',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errno'])) {
        $this->errno = $vals['errno'];
      }
      if (isset($vals['errmsg'])) {
        $this->errmsg = $vals['errmsg'];
      }
      if (isset($vals['green_split_opt_signal_plan'])) {
        $this->green_split_opt_signal_plan = $vals['green_split_opt_signal_plan'];
      }
      if (isset($vals['over_saturation_flow'])) {
        $this->over_saturation_flow = $vals['over_saturation_flow'];
      }
      if (isset($vals['green_loss_flow'])) {
        $this->green_loss_flow = $vals['green_loss_flow'];
      }
    }
  }

  public function getName() {
    return 'GreenSplitOptResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errmsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->green_split_opt_signal_plan = new \Todsplit\SignalPlan();
            $xfer += $this->green_split_opt_signal_plan->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->over_saturation_flow = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $xfer += $input->readString($elem40);
              $this->over_saturation_flow []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->green_loss_flow = array();
            $_size41 = 0;
            $_etype44 = 0;
            $xfer += $input->readListBegin($_etype44, $_size41);
            for ($_i45 = 0; $_i45 < $_size41; ++$_i45)
            {
              $elem46 = null;
              $xfer += $input->readString($elem46);
              $this->green_loss_flow []= $elem46;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GreenSplitOptResponse');
    if ($this->errno !== null) {
      $xfer += $output->writeFieldBegin('errno', TType::STRING, 1);
      $xfer += $output->writeString($this->errno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errmsg !== null) {
      $xfer += $output->writeFieldBegin('errmsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errmsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->green_split_opt_signal_plan !== null) {
      if (!is_object($this->green_split_opt_signal_plan)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('green_split_opt_signal_plan', TType::STRUCT, 3);
      $xfer += $this->green_split_opt_signal_plan->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->over_saturation_flow !== null) {
      if (!is_array($this->over_saturation_flow)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('over_saturation_flow', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->over_saturation_flow));
        {
          foreach ($this->over_saturation_flow as $iter47)
          {
            $xfer += $output->writeString($iter47);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->green_loss_flow !== null) {
      if (!is_array($this->green_loss_flow)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('green_loss_flow', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->green_loss_flow));
        {
          foreach ($this->green_loss_flow as $iter48)
          {
            $xfer += $output->writeString($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TodInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $dates = null;
  /**
   * @var (array)[]
   */
  public $junction_movements = null;
  /**
   * @var int
   */
  public $tod_cnt = null;
  /**
   * @var \Todsplit\Version[]
   */
  public $version = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dates',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'junction_movements',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        3 => array(
          'var' => 'tod_cnt',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'version',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Todsplit\Version',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dates'])) {
        $this->dates = $vals['dates'];
      }
      if (isset($vals['junction_movements'])) {
        $this->junction_movements = $vals['junction_movements'];
      }
      if (isset($vals['tod_cnt'])) {
        $this->tod_cnt = $vals['tod_cnt'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
    }
  }

  public function getName() {
    return 'TodInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dates);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->junction_movements = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = array();
              $_size55 = 0;
              $_ktype56 = 0;
              $_vtype57 = 0;
              $xfer += $input->readMapBegin($_ktype56, $_vtype57, $_size55);
              for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
              {
                $key60 = '';
                $val61 = '';
                $xfer += $input->readString($key60);
                $xfer += $input->readString($val61);
                $elem54[$key60] = $val61;
              }
              $xfer += $input->readMapEnd();
              $this->junction_movements []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tod_cnt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->version = array();
            $_size62 = 0;
            $_etype65 = 0;
            $xfer += $input->readListBegin($_etype65, $_size62);
            for ($_i66 = 0; $_i66 < $_size62; ++$_i66)
            {
              $elem67 = null;
              $elem67 = new \Todsplit\Version();
              $xfer += $elem67->read($input);
              $this->version []= $elem67;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TodInfo');
    if ($this->dates !== null) {
      $xfer += $output->writeFieldBegin('dates', TType::STRING, 1);
      $xfer += $output->writeString($this->dates);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->junction_movements !== null) {
      if (!is_array($this->junction_movements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('junction_movements', TType::LST, 2);
      {
        $output->writeListBegin(TType::MAP, count($this->junction_movements));
        {
          foreach ($this->junction_movements as $iter68)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter68));
              {
                foreach ($iter68 as $kiter69 => $viter70)
                {
                  $xfer += $output->writeString($kiter69);
                  $xfer += $output->writeString($viter70);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tod_cnt !== null) {
      $xfer += $output->writeFieldBegin('tod_cnt', TType::I32, 3);
      $xfer += $output->writeI32($this->tod_cnt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      if (!is_array($this->version)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('version', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->version));
        {
          foreach ($this->version as $iter71)
          {
            $xfer += $iter71->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TodPlans {
  static $_TSPEC;

  /**
   * @var (array)[]
   */
  public $tod_plans = null;
  /**
   * @var string
   */
  public $errno = null;
  /**
   * @var string
   */
  public $errmsg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tod_plans',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::LST,
              'etype' => TType::STRING,
              'elem' => array(
                'type' => TType::STRING,
                ),
              ),
            ),
          ),
        2 => array(
          'var' => 'errno',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'errmsg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tod_plans'])) {
        $this->tod_plans = $vals['tod_plans'];
      }
      if (isset($vals['errno'])) {
        $this->errno = $vals['errno'];
      }
      if (isset($vals['errmsg'])) {
        $this->errmsg = $vals['errmsg'];
      }
    }
  }

  public function getName() {
    return 'TodPlans';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->tod_plans = array();
            $_size72 = 0;
            $_etype75 = 0;
            $xfer += $input->readListBegin($_etype75, $_size72);
            for ($_i76 = 0; $_i76 < $_size72; ++$_i76)
            {
              $elem77 = null;
              $elem77 = array();
              $_size78 = 0;
              $_ktype79 = 0;
              $_vtype80 = 0;
              $xfer += $input->readMapBegin($_ktype79, $_vtype80, $_size78);
              for ($_i82 = 0; $_i82 < $_size78; ++$_i82)
              {
                $key83 = '';
                $val84 = array();
                $xfer += $input->readString($key83);
                $val84 = array();
                $_size85 = 0;
                $_etype88 = 0;
                $xfer += $input->readListBegin($_etype88, $_size85);
                for ($_i89 = 0; $_i89 < $_size85; ++$_i89)
                {
                  $elem90 = null;
                  $xfer += $input->readString($elem90);
                  $val84 []= $elem90;
                }
                $xfer += $input->readListEnd();
                $elem77[$key83] = $val84;
              }
              $xfer += $input->readMapEnd();
              $this->tod_plans []= $elem77;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errmsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TodPlans');
    if ($this->tod_plans !== null) {
      if (!is_array($this->tod_plans)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tod_plans', TType::LST, 1);
      {
        $output->writeListBegin(TType::MAP, count($this->tod_plans));
        {
          foreach ($this->tod_plans as $iter91)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::LST, count($iter91));
              {
                foreach ($iter91 as $kiter92 => $viter93)
                {
                  $xfer += $output->writeString($kiter92);
                  {
                    $output->writeListBegin(TType::STRING, count($viter93));
                    {
                      foreach ($viter93 as $iter94)
                      {
                        $xfer += $output->writeString($iter94);
                      }
                    }
                    $output->writeListEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errno !== null) {
      $xfer += $output->writeFieldBegin('errno', TType::STRING, 2);
      $xfer += $output->writeString($this->errno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errmsg !== null) {
      $xfer += $output->writeFieldBegin('errmsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errmsg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


